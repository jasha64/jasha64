#include <iostream>
using namespace std;

const int N = 9, XS[N][N] = {
{6, 6, 6, 6, 6, 6, 6, 6, 6},
{6, 7, 7, 7, 7, 7, 7, 7, 6},
{6, 7, 8, 8, 8, 8, 8, 7, 6},
{6, 7, 8, 9, 9, 9, 8, 7, 6},
{6, 7, 8, 9,10, 9, 8, 7, 6},
{6, 7, 8, 9, 9, 9, 8, 7, 6},
{6, 7, 8, 8, 8, 8, 8, 7, 6},
{6, 7, 7, 7, 7, 7, 7, 7, 6},
{6, 6, 6, 6, 6, 6, 6, 6, 6}
},
X[N * N] = {4,
5, 4, 3, 3, 3, 4, 5, 5,
6, 5, 4, 3, 2, 2, 2, 2, 2, 3, 4, 5, 6, 6, 6, 6,
7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7,
8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8},
Y[N * N] = {4,
5, 5, 5, 4, 3, 3, 3, 4,
6, 6, 6, 6, 6, 5, 4, 3, 2, 2, 2, 2, 2, 3, 4, 5,
7, 7, 7, 7, 7, 7, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6,
8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7},
S[N][N] = {
{0, 0, 0, 1, 1, 1, 2, 2, 2},
{0, 0, 0, 1, 1, 1, 2, 2, 2},
{0, 0, 0, 1, 1, 1, 2, 2, 2},
{3, 3, 3, 4, 4, 4, 5, 5, 5},
{3, 3, 3, 4, 4, 4, 5, 5, 5},
{3, 3, 3, 4, 4, 4, 5, 5, 5},
{6, 6, 6, 7, 7, 7, 8, 8, 8},
{6, 6, 6, 7, 7, 7, 8, 8, 8},
{6, 6, 6, 7, 7, 7, 8, 8, 8}
};
int a[N][N], Res, Cur_Res;
bool b[N][N], ur[N][10], uc[N][10], us[N][10];

void Search(int Cur)
{
	if (Cur == N * N) {Res = max(Res, Cur_Res); return;}
	const int &x = X[Cur], &y = Y[Cur], &s = S[X[Cur]][Y[Cur]];
	if (b[x][y]) {Search(Cur + 1); return;}
	for (int i = N; i > 0; --i)
		if (!ur[x][i] && !uc[y][i] && !us[s][i])
		{
			a[x][y] = i;
			Cur_Res += i * XS[x][y];
			ur[x][i] = uc[y][i] = us[s][i] = true;
			Search(Cur + 1);
			ur[x][i] = uc[y][i] = us[s][i] = false;
			Cur_Res -= i * XS[x][y];
		}
}

int main()
{
	int i, j;
	for (i = 0; i < N; ++i)
		for (j = 0; j < N; ++j)
		{
			cin >> a[i][j];
			if (a[i][j])
			{
				b[i][j] = true;
				ur[i][a[i][j]] = uc[j][a[i][j]] = us[S[i][j]][a[i][j]] = true;
				Cur_Res += a[i][j] * XS[i][j];
			}
		}
	
	Search(0);
	
	if (!Res) cout << -1 << endl;
	else cout << Res << endl;
	
	return 0;
}

